services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: emotech_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: emotech_password_2025
      MONGO_INITDB_DATABASE: emotech_quiz
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - emotech_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: emotech_mongo_express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: emotech_password_2025
      ME_CONFIG_MONGODB_URL: mongodb://admin:emotech_password_2025@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: emotech_password_2025
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - emotech_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: emotech_backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://admin:emotech_password_2025@mongodb:27017/emotech_quiz?authSource=admin
      - DB_NAME=emotech_quiz
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - emotech_network
    volumes:
      - ./backend:/app
      - /app/__pycache__
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: emotech_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8001
      - REACT_APP_API_URL=http://localhost:8001/api
      - NODE_ENV=production
      - GENERATE_SOURCEMAP=false
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - emotech_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: emotech_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - emotech_network

volumes:
  mongodb_data:
    driver: local

networks:
  emotech_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 